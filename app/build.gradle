plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'idea'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
}

idea.module {
    // These are not viable to index on most systems so exclude them to prevent IDE crashes
    excludeDirs.add(file("libraries/boost"))
}

project.ext.isBuildSigned = (System.getenv("CI") == "true") && (System.getenv("IS_BUILD_SIGNED") == "true")

android {
    namespace 'org.stratoemu.strato'
    compileSdk 34

    // Add a block to execute Git commands during the execution phase
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.assemble.doLast {
                // Execute Git commands during the execution phase
                def versionName = getGitVersionName()
                def versionCode = getGitVersionCode()
                logger.quiet("Version name: $versionName")
                logger.quiet("Version code: $versionCode")
            }
        }
    }

    defaultConfig {
        applicationId "org.stratoemu.strato"

        minSdk 29
        targetSdk 33

        versionCode getGitVersionCode()
        versionName getGitVersionName()

        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters "arm64-v8a"
        }

        // Disable the use of a separate process for emulation by default
        manifestPlaceholders["emulationProcess"] = ""

        def locales = ["en", "de", "el", "es", "es-419", "fr", "hu", "id", "it", "ja", "ko", "pl", "ru", "ta", "zh-Hans", "zh-Hant"]

        // Add available locales to the build config so that they can be accessed from the app
        buildConfigField "String[]", "AVAILABLE_APP_LANGUAGES", "new String[]{\"" + locales.join("\",\"") + "\"}"
        // Uncomment the following line whenever AAPT2 will properly support BCP47 language tags
        //resourceConfigurations += locales
    }
    
    // Move the sourceSets block outside of android
    sourceSets {
        reldebug {
            jniLibs {
                srcDir "libraries/vklayers"
            }
        }

        debug {
            jniLibs {
                srcDir "libraries/vklayers"
            }
        }
    }

    /* JVM Bytecode Options */
    def javaVersion = JavaVersion.VERSION_17
    kotlinOptions {
        jvmTarget = javaVersion.toString()
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    packagingOptions {
        jniLibs.useLegacyPackaging = true
    }

    signingConfigs {
        ci {
            storeFile file(System.getenv("SIGNING_STORE_PATH") ?: "${System.getenv("user.home")}/keystore.jks")
            storePassword System.getenv("SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            debuggable true
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=RELEASE"
                }
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig = isBuildSigned ? signingConfigs.ci : signingConfigs.debug
            manifestPlaceholders["emulationProcess"] = ":emulationProcess"
        }

        reldebug {
            debuggable true
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=RELWITHDEBINFO"
                }
            }
            minifyEnabled false
            shrinkResources false
            signingConfig = isBuildSigned ? signingConfigs.ci : signingConfigs.debug
        }

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig = isBuildSigned ? signingConfigs.ci : signingConfigs.debug
        }
    }

    flavorDimensions += "version"
    productFlavors {
        mainline {
            dimension = "version"
        }

        dev {
            dimension = "version"
            applicationIdSuffix = ".dev"
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    /* NDK and CMake */
    ndkVersion '26.1.10909125'
    externalNativeBuild {
        cmake {
            version '3.22.1+'
            path "CMakeLists.txt"
        }
    }

    /* Android Assets */
    androidResources {
        ignoreAssetsPattern '*.md'
    }

    /* Vulkan Validation Layers */
}
